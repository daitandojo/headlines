
# File: .claude/settings.local.json
{
  "permissions": {
    "allow": [
      "Bash(rm:*)"
    ],
    "deny": []
  }
}

# File: .dockerignore
# File: .dockerignore (version 1.01)
/.git
/node_modules
.dockerignore
.env

# Explicitly include package-lock.json to ensure it's in the build context,
# overriding any other potential ignore rules.
!package-lock.json

# File: .env.template
# .env.template
# This file provides a template for the required environment variables.
# Copy this file to .env and fill in your actual values.
# DO NOT COMMIT THE .env FILE TO VERSION CONTROL.

# --- Core Application Behavior ---
NODE_ENV=development # 'development' or 'production'
LOG_LEVEL=debug      # 'debug', 'info', 'warn', 'error'
CONCURRENCY_LIMIT=3  # Number of parallel network operations (scraping, AI calls)
FORCE_EMAIL_SEND_DEV=true # Set to 'true' to force emails to be sent even if NODE_ENV is 'development'

# --- MongoDB Configuration ---
MONGO_URI="mongodb+srv://user:password@cluster.mongodb.net/database?retryWrites=true&w=majority"

# --- Kimi API Configuration ---
KIMI_API_KEY="sk-..."
LLM_MODEL_HEADLINES="moonshot-v1-8k" # Example Kimi model
LLM_MODEL_ARTICLES="moonshot-v1-32k" # Example Kimi model

# --- Email Sending Configuration (via Nodemailer) ---
SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_SECURE=true # true for 465, false for other ports
SMTP_USER="your-email@gmail.com"
SMTP_PASS="your-app-password" # Use an App Password for Gmail
SMTP_FROM_ADDRESS="your-email@gmail.com"
SMTP_FROM_NAME="Wealth Events Bot"

# --- Email Recipients ---
# Comma-separated list of emails
HEADLINE_RECIPIENTS="recipient1@example.com,recipient2@example.com"
SUPERVISOR_EMAIL="supervisor@example.com"
# Set to false to disable sending to supervisor if the email is the default placeholder
SEND_TO_DEFAULT_SUPERVISOR=true

# File: .github/workflows/fly-deploy.yml
# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

name: Fly Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy-group    # optional: ensure only one action runs at a time
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

# File: .github/workflows/run-pipeline.yml
name: Run Pipeline on Schedule

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    # IMPORTANT: GitHub schedules run on UTC time.
    # 10:00 Copenhagen (CEST, UTC+2) is 08:00 UTC
    # 16:30 Copenhagen (CEST, UTC+2) is 14:30 UTC
    - cron: '0 6 * * *'
    - cron: '0 8 * * *'
    - cron: '30 14 * * *'
    - cron: '39 22 * * *'

jobs:
  run-on-fly:
    name: Start a Fly Machine to Run the Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      - uses: actions/checkout@v4
      
      # Step 2: Set up the flyctl command-line tool (This was the missing piece)
      - uses: superfly/flyctl-actions/setup-flyctl@master
        
      # Step 3: Now that flyctl is installed, run the command
      - name: Start a temporary machine and wait for completion
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # This command will now be found and will execute correctly.
          fly machine run .
          
          echo "The machine has completed its run and has been destroyed."

# File: .gitignore
/node_modules
/.pnpm
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions
# misc
.DS_Store
*.pem
# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
# env files
.env*
!/.env.template
# vercel
.vercel
# typescript
*.tsbuildinfo
next-env.d.ts

# File: .nvmrc
20.15.1


# File: CLAUDE.md
# File: CLAUDE.md (version 1.02)
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

**Headlines-Mongo** is a news processing application that scrapes Danish business news (Børsen, Berlingske, Politiken, Finans.dk), assesses relevance using AI/LLM, and sends curated newsletters via email. The application is deployed on Fly.io and is designed to be triggered by a scheduler.

## Architecture

The application is architected as a **script-based, scheduled task** that runs its data pipeline once and then exits. It is not a web server.

1.  **Trigger**: The application is triggered directly by a scheduler (e.g., Fly.io's `schedule` attribute in `fly.toml` or a local cron job) which executes the `npm start` command.
2.  **Scraping**: Fetch headlines from configured sources.
3.  **Filtering**: Skip articles already in the database.
4.  **AI Assessment (Headlines)**: LLM evaluates headline relevance (threshold: 10).
5.  **Enrichment**: Extract full article content for relevant headlines.
6.  **AI Assessment (Content)**: LLM evaluates article content quality (threshold: 10).
7.  **Storage**: Store relevant articles in MongoDB.
8.  **Email**: Send curated newsletters and a supervisor report directly via a configured SMTP service.

All processing is done within the `runPipeline` function call.

## Core Components

### Key Files
- `app.js`: Main application entry point. Sets up the environment and triggers the pipeline.
- `app-logic.js`: Contains the `runPipeline` function which orchestrates the entire data processing flow from start to finish.
- `src/config/sources.js`: Web scraping configuration for Danish news sites.
- `src/config/env.js`: Centralized module for reading and exporting all environment variables.
- `src/config/email.js`: SMTP and email content configuration.

### Pipeline Modules
- `src/modules/scraping/fetchHeadlines.js`: Multi-source headline extraction.
- `src/modules/assessments/assessHeadlines.js`: AI relevance scoring for headlines.
- `src/modules/assessments/assessArticles.js`: AI content quality scoring.
- `src/modules/scraping/enrichWithBody.js`: Full article content extraction.
- `src/modules/email/index.js`: Email composition and delivery coordination.
- `src/modules/mongoStore/articleOperations.js`: MongoDB CRUD operations.

### Models
- `models/Article.js`: MongoDB schema with comprehensive fields for AI scoring and processing metadata.

## Development Commands

### Core Operations
```bash
npm start          # Run the pipeline script locally
npm test           # Run Jest test suite

# File: Dockerfile
# File: Dockerfile (version 1.02)
# syntax = docker/dockerfile:1

ARG NODE_VERSION=20.15.1
FROM node:${NODE_VERSION}-slim AS base

WORKDIR /app

# --- Build Stage ---
FROM base AS build
RUN apt-get update -qq && apt-get install -y --no-install-recommends build-essential python-is-python3
COPY package-lock.json package.json ./

# Switch to `npm install` which is more robust than `npm ci` in complex scenarios,
# especially with `file:` dependencies that might exist locally but not in the build context.
# Using --omit=dev is equivalent to --production, ensuring dev dependencies are not installed.
RUN npm install --omit=dev

COPY . .

# --- Final Production Image ---
FROM base
COPY --from=build --chown=node:node /app /app
USER node

# This is no longer a web server, so no EXPOSE needed.
# It runs the pipeline script once and then exits.
CMD [ "node", "app.js" ]

# File: app-logic.js
// app-logic.js (version 1.0)
import { connectDatabase, disconnectDatabase } from './src/database.js';
import { scrapeAllHeadlines, scrapeArticleContent } from './src/modules/scraper/index.js';
import { filterFreshArticles, storeInitialHeadlineData, updateArticlesWithFullData } from './src/modules/mongoStore/index.js';
import { assessHeadlinesInBatches, assessArticleContent, performKimiSanityCheck, checkModelPermissions } from './src/modules/ai/index.js';
import { logger } from './src/utils/logger.js';
import { HEADLINES_RELEVANCE_THRESHOLD, LLM_MODEL_HEADLINES, LLM_MODEL_ARTICLES } from './src/config/index.js';
import { sendWealthEventsEmail, sendSupervisorReportEmail } from './src/modules/email/index.js';
import { truncateString } from './src/utils/helpers.js';

export async function runPipeline() {
    const runStartTime = Date.now();
    logger.info('🚀 STARTING HEADLINES PROCESSING PIPELINE...');
    const runStats = {
        headlinesScraped: 0,
        freshHeadlinesFound: 0,
        headlinesAssessed: 0,
        headlinesRelevant: 0,
        articlesForEnrichment: 0,
        articlesEnriched: 0,
        articlesAssessed: 0,
        articlesRelevant: 0,
        articlesEmailed: 0,
        errors: [],
    };

    let allProcessedArticles = [];
    let dbConnected = false;

    try {
        if (!await performKimiSanityCheck()) {
            logger.fatal('Kimi AI service failed the sanity check. Aborting pipeline.');
            return;
        }
        logger.info('✅ Kimi AI service passed sanity check.');

        const requiredModels = [LLM_MODEL_HEADLINES, LLM_MODEL_ARTICLES];
        if (!await checkModelPermissions(requiredModels)) {
            logger.fatal('Configured models not available via Kimi API. Aborting pipeline.');
            return;
        }
        logger.info('✅ Kimi model permissions verified.');

        await connectDatabase();
        dbConnected = true;

        const scrapedHeadlines = await scrapeAllHeadlines();
        runStats.headlinesScraped = scrapedHeadlines.length;
        if (scrapedHeadlines.length === 0) {
            logger.warn('No headlines scraped. Ending run.');
            return;
        }

        const freshHeadlines = await filterFreshArticles(scrapedHeadlines);
        runStats.freshHeadlinesFound = freshHeadlines.length;
        if (freshHeadlines.length === 0) {
            logger.info('No new headlines found. Ending run.');
            return;
        }
        logger.info(`Found ${freshHeadlines.length} new headlines to process.`);

        const assessedHeadlines = await assessHeadlinesInBatches(freshHeadlines);
        runStats.headlinesAssessed = assessedHeadlines.length;
        
        const relevantResults = assessedHeadlines
            .filter(a => a.relevance_headline >= HEADLINES_RELEVANCE_THRESHOLD)
            .sort((a, b) => b.relevance_headline - a.relevance_headline);

        logger.info(`📊 Headline Assessment Complete. Found ${relevantResults.length} relevant headlines.`);
        if (relevantResults.length > 0) {
            logger.info('--- Top 5 Relevant Headlines ---');
            relevantResults.slice(0, 5).forEach((article, i) => {
                logger.info(`${i + 1}. [Score: ${article.relevance_headline}] "${truncateString(article.headline, 70)}" - ${truncateString(article.assessment_headline, 50)}`);
            });
            logger.info('---------------------------------');
        }

        allProcessedArticles = await storeInitialHeadlineData(assessedHeadlines);
        logger.info('Stored initial data for all new headlines.');

        const relevantHeadlines = allProcessedArticles.filter(
            (article) => article.relevance_headline >= HEADLINES_RELEVANCE_THRESHOLD && !article.storage_error_initial_headline_data
        );
        runStats.headlinesRelevant = relevantHeadlines.length;
        if (relevantHeadlines.length === 0) {
            logger.info('No new headlines met the relevance threshold for full article analysis.');
            return;
        }
        logger.info(`Found ${relevantHeadlines.length} relevant headlines for full article enrichment.`);
        runStats.articlesForEnrichment = relevantHeadlines.length;

        const enrichmentPromises = relevantHeadlines.map(async (article) => {
            const enrichedArticle = await scrapeArticleContent(article);
            if (enrichedArticle.articleContent && enrichedArticle.articleContent.contents.join('').length > 150) {
                runStats.articlesEnriched++;
                const finalAssessment = await assessArticleContent(enrichedArticle);
                return finalAssessment;
            }
            logger.warn(`Insufficient content for article: ${article.link}. Skipping full assessment.`);
            return { ...enrichedArticle, error: 'Insufficient content' };
        });

        const articlesToAssess = await Promise.all(enrichmentPromises);
        runStats.articlesAssessed = articlesToAssess.length;
        logger.info(`Assessed ${runStats.articlesAssessed} full articles.`);


        if (articlesToAssess.length > 0) {
            const fullyProcessedArticles = await updateArticlesWithFullData(articlesToAssess);

            allProcessedArticles = allProcessedArticles.map(proc => {
                const updated = fullyProcessedArticles.find(f => f.link === proc.link);
                return updated ? { ...proc, ...updated } : proc;
            });

            const finalEmailedArticles = await sendWealthEventsEmail(allProcessedArticles);
            runStats.articlesEmailed = finalEmailedArticles.filter(a => a.emailed).length;
            
            allProcessedArticles = finalEmailedArticles;
        }

    } catch (error) {
        logger.fatal({ err: error }, 'A critical error occurred in the main pipeline');
        runStats.errors.push(`CRITICAL: ${error.message}`);
    } finally {
        const runEndTime = Date.now();
        const duration = ((runEndTime - runStartTime) / 1000).toFixed(2);
        
        if (dbConnected) {
             logger.info(runStats, '📊 PIPELINE RUN SUMMARY');
             await sendSupervisorReportEmail(allProcessedArticles, runStats);
             await disconnectDatabase();
        } else {
             logger.info('Pipeline halted before DB connection. No supervisor report sent.');
        }
       
        logger.info(`✅ PIPELINE FINISHED in ${duration} seconds.`);
    }
}

# File: app.js
// app.js (version 1.0)
import 'dotenv/config'; // Load environment variables at the very beginning
import { logger } from './src/utils/logger.js';
import { runPipeline } from './app-logic.js';

async function start() {
    try {
        await runPipeline();
        // The process will exit naturally after the pipeline completes.
    } catch (error) {
        logger.fatal({ err: error }, 'A top-level, unhandled exception occurred in the application. The pipeline did not complete.');
        // Exit with a failure code to signal an issue to the scheduler (e.g., Fly.io).
        process.exit(1);
    }
}

start();

# File: docker-compose.yml
# docker-compose.yml (version 1.03)
# This file is for LOCAL DEVELOPMENT and TESTING ONLY.
# It allows us to reliably run the application in a container,
# mimicking the production environment.

services:
  app:
    # Build the image from the Dockerfile in the current directory.
    build: .
    # Use the .env file to supply environment variables to the container.
    # docker-compose has a robust parser that handles special characters correctly.
    env_file:
      - .env
    # The application is a script, not a web server, so no port mapping is needed.
    # Give the container a friendly name.
    container_name: headlines_local

# File: fly.toml
app = 'headlines-polished-sea-1731'
primary_region = 'lhr'

# This empty [processes] block tells flyctl to use the modern Machines platform
# and not look for a long-running web service.
[processes]

# We define a template for a machine that can be started on demand.
[[machines]]
  # This machine will not run on a simple schedule from Fly.
  # schedule = 'hourly' <-- REMOVE THIS LINE
  
  # The machine will be destroyed after its task is complete.
  auto_destroy = true
  # When created during deploy, it will be in a 'stopped' state, costing nothing for CPU/RAM.
  initial_state = "stopped"
  
  [machines.vm]
    memory = '1gb'
    cpu_kind = 'shared'
    cpus = 1

# File: models/Article.js
// models/Article.js (version 2.0)
import mongoose from 'mongoose';

const { Schema, model, models } = mongoose;

const ArticleSchema = new Schema(
  {
    headline: {
      type: String,
      required: true,
      trim: true,
      minlength: 10,
      maxlength: 500,
    },
    link: { type: String, required: true, unique: true, trim: true },
    newspaper: { type: String, required: true, trim: true },
    source: { type: String, required: true, trim: true },
    section: { type: String, required: false, trim: true },
    author: { type: String, required: false, trim: true },
    published: { type: String, required: false, trim: true },
    position: { type: String, required: false, trim: true },
    raw: { type: Schema.Types.Mixed, required: false },
    relevance_headline: { type: Number, required: true, min: 0, max: 100 },
    assessment_headline: { type: String, required: true, trim: true },
    articleContent: {
      headlines: { type: [String], required: false, default: [] },
      subheadings: { type: [String], required: false, default: [] },
      captions: { type: [String], required: false, default: [] },
      contents: { type: [String], required: false, default: [] },
    },
    topic: { type: String, required: false, trim: true },
    relevance_article: { type: Number, required: false, min: 0, max: 100 },
    assessment_article: { type: String, required: false, trim: true },
    amount: { type: Number, required: false },
    contacts: { type: [String], required: false, default: [] },
    background: { type: String, required: false, trim: true },
    error: { type: String, required: false, trim: true, default: null },
    enrichment_error: {
      type: String,
      required: false,
      trim: true,
      default: null,
    },
    storage_error_initial_headline_data: {
      type: String,
      required: false,
      trim: true,
      default: null,
    },
    db_operation_status: { type: String, required: false, trim: true },
    db_error_reason: { type: String, required: false, trim: true },
    emailed: { type: Boolean, default: false },
    email_error: { type: String, required: false, trim: true, default: null },
    email_skipped_reason: {
      type: String,
      required: false,
      trim: true,
      default: null,
    },
  },
  {
    timestamps: true,
    collection: 'articles',
  }
);

ArticleSchema.index({ headline: 1 });
ArticleSchema.index({ newspaper: 1, createdAt: -1 });
ArticleSchema.index({ relevance_article: -1, createdAt: -1 });
ArticleSchema.index({ relevance_headline: -1, createdAt: -1 });

export default models.Article || model('Article', ArticleSchema);

# File: package.json
{
  "name": "headlines-pipeline",
  "version": "3.0.0",
  "description": "A Node.js pipeline to scrape, analyze, and store news articles about wealth events.",
  "main": "app.js",
  "type": "module",
  "scripts": {
    "start": "node app.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "scraper",
    "axios",
    "cheerio",
    "nodejs",
    "openai",
    "mongoose"
  ],
  "author": "The Driver",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.7.2",
    "cheerio": "^1.0.0-rc.12",
    "dotenv": "^16.4.5",
    "https-proxy-agent": "^7.0.6",
    "mongoose": "^8.4.1",
    "nodemailer": "^6.9.13",
    "openai": "^4.47.3",
    "p-limit": "^5.0.0",
    "pino": "^9.1.0",
    "pino-pretty": "^11.1.0"
  }
}

# File: scrape.js
// scrape.js
// A utility script to scrape a few headlines and articles from each configured source.
// This is useful for testing, debugging, and adding new newspapers.
// It now directly uses the main application's scraping modules for consistency.
// To run: `node scrape.js` from the project root.

import 'dotenv/config';
import { SITES_CONFIG } from './src/config/sources.js';
import { scrapeAllHeadlines, scrapeArticleContent } from './src/modules/scraper/index.js';
import { truncateString } from './src/utils/helpers.js';

// --- Configuration ---
const HEADLINES_TO_SCRAPE_PER_SITE = 3;

// --- Console Colors for Readability ---
const colors = {
    reset: "\x1b[0m",
    red: "\x1b[31m",
    green: "\x1b[32m",
    yellow: "\x1b[33m",
    cyan: "\x1b[36m",
    grey: "\x1b[90m",
};
const log = {
    info: (msg) => console.log(`${colors.cyan}${msg}${colors.reset}`),
    success: (msg) => console.log(`${colors.green}${msg}${colors.reset}`),
    warn: (msg) => console.log(`${colors.yellow}${msg}${colors.reset}`),
    error: (msg) => console.log(`${colors.red}${msg}${colors.reset}`),
};


/**
 * Main function to orchestrate the test scrape.
 */
async function main() {
    log.info(`🚀 Starting test scrape for ${HEADLINES_TO_SCRAPE_PER_SITE} articles per site...`);

    const allHeadlines = await scrapeAllHeadlines();
    const sites = Object.values(SITES_CONFIG);

    for (const site of sites) {
        console.log(`\n==================== 📰 ${site.name.toUpperCase()} ====================`);

        // FIX: Filter by `h.source` which is guaranteed to match `site.name`.
        const siteHeadlines = allHeadlines
            .filter(h => h.source === site.name)
            .slice(0, HEADLINES_TO_SCRAPE_PER_SITE);

        if (siteHeadlines.length === 0) {
            log.warn(`No headlines found for ${site.name}.`);
            continue;
        }

        log.info(`Found ${siteHeadlines.length} headlines. Fetching full article content...`);

        for (const [index, headline] of siteHeadlines.entries()) {
            console.log(`\n[${index + 1}/${siteHeadlines.length}] ${truncateString(headline.headline, 80)}`);
            console.log(`${colors.grey}  -> ${headline.link}${colors.reset}`); // Always show link
            
            // Use the main application's function to fetch and parse the article
            const articleWithContent = await scrapeArticleContent(headline);

            if (articleWithContent.articleContent?.contents?.length > 0) {
                const contentSnippet = articleWithContent.articleContent.contents.join(' ').trim().replace(/\s\s+/g, ' ').substring(0, 150);
                log.success(`  ✅ SUCCESS: "${contentSnippet}..."`);
            } else {
                const reason = articleWithContent.enrichment_error || 'Selector did not find content (this is expected for live blogs or paywalled articles)';
                log.error(`  ❌ FAILED: ${reason}`);
            }
        }
    }

    log.info('\n✅ Test scrape finished.');
}

// --- Execute Script ---
main().catch(err => {
    console.error(err);
    log.error('The test scrape script encountered a fatal error.');
    process.exit(1);
});

# File: scripts/reDeploy.sh
#!/bin/bash
# redeploy.sh
# A script to completely destroy, re-create, set secrets, and then redeploy the Fly.io app.
# This ensures a clean slate, removing any old machines or volumes.

# --- Configuration ---
# Colors for better logging
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# --- Pre-flight Checks ---
echo -e "${YELLOW}--- Running Pre-flight Checks ---${NC}"

if ! command -v fly &> /dev/null; then
    echo -e "${RED}Error: 'fly' command-line tool not found.${NC}"
    exit 1
fi

if [ ! -f "fly.toml" ]; then
    echo -e "${RED}Error: No fly.toml file found in this directory.${NC}"
    exit 1
fi

if [ ! -f "scripts/setFlySecrets.sh" ]; then
    echo -e "${RED}Error: The secrets script is missing at 'scripts/setFlySecrets.sh'.${NC}"
    exit 1
fi

APP_NAME=$(grep '^app = ' fly.toml | cut -d "'" -f 2)

if [ -z "$APP_NAME" ]; then
    echo -e "${RED}Error: Could not determine app name from fly.toml.${NC}"
    exit 1
fi

echo -e "${GREEN}Checks passed. App name is '${APP_NAME}'.${NC}"
echo ""

# --- Step 1: Destroy the App (with confirmation and error handling) ---
echo -e "${YELLOW}--- Step 1: Destroying the App ---${NC}"
echo -e "${RED}WARNING: This is a destructive action. It will permanently delete the app '${APP_NAME}' if it exists.${NC}"
read -p "Are you absolutely sure you want to proceed with the full redeploy? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Operation cancelled by user."
    exit 1
fi

echo "Attempting to destroy '${APP_NAME}'..."
DESTROY_OUTPUT=$(fly apps destroy "$APP_NAME" --yes 2>&1)
DESTROY_STATUS=$?

if [ $DESTROY_STATUS -eq 0 ]; then
    echo -e "${GREEN}App '${APP_NAME}' destroyed successfully.${NC}"
elif echo "$DESTROY_OUTPUT" | grep -q "Could not find App"; then
    echo -e "${YELLOW}Warning: App '${APP_NAME}' did not exist. Continuing to the create step.${NC}"
else
    echo -e "${RED}An error occurred while trying to destroy the app:${NC}"
    echo "$DESTROY_OUTPUT"
    exit 1
fi
echo ""


# --- Step 2: Create the App ---
echo -e "${YELLOW}--- Step 2: Creating the App ---${NC}"
echo "Registering a new, empty app shell on Fly.io for '${APP_NAME}'..."

fly apps create "$APP_NAME" --org personal

if [ $? -ne 0 ]; then
    echo -e "${RED}An error occurred while creating the app. Please check the output above.${NC}"
    exit 1
fi
echo -e "${GREEN}Empty app shell for '${APP_NAME}' created successfully.${NC}"
echo ""


# --- Step 3: Set Secrets ---
echo -e "${YELLOW}--- Step 3: Setting Secrets ---${NC}"
echo "Running the setFlySecrets.sh script to populate environment variables..."

# Automatically answer 'y' to the confirmation prompt within setFlySecrets.sh
# to avoid being prompted twice.
echo 'y' | bash ./scripts/setFlySecrets.sh

if [ $? -ne 0 ]; then
    echo -e "${RED}An error occurred while setting secrets. Please check the output above.${NC}"
    exit 1
fi
echo -e "${GREEN}Secrets set successfully.${NC}"
echo ""


# --- Step 4: Deploy the App ---
echo -e "${YELLOW}--- Step 4: Deploying the App ---${NC}"
echo "Deploying the project to the new instance of '${APP_NAME}'..."
echo "This will create 1 machine with an 'hourly' schedule as defined in fly.toml."

fly deploy

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Successfully deployed '${APP_NAME}'. A new release has been created and the scheduled machine is configured.${NC}"
else
    echo -e "${RED}❌ An error occurred during deployment. Please check the output above.${NC}"
    exit 1
fi

# File: scripts/setFlySecrets.sh
#!/bin/bash
# scripts/setFlySecrets.sh (version 1.0)

# A script to read a .env file and set the variables as Fly.io secrets.
# It builds a single command to set all secrets at once for efficiency.

# --- Configuration ---
ENV_FILE=".env"

# --- Pre-flight Checks ---

# Check for .env file
if [ ! -f "$ENV_FILE" ]; then
    echo "Error: .env file not found in the current directory."
    exit 1
fi

# Check for flyctl command
if ! command -v fly &> /dev/null
then
    echo "Error: 'fly' command-line tool not found."
    exit 1
fi

if [ ! -f "fly.toml" ]; then
    echo "Error: No fly.toml file found in this directory."
    echo "Please run 'fly launch' first."
    exit 1
fi

APP_NAME=$(grep '^app = ' fly.toml | cut -d "'" -f 2)
if [ -z "$APP_NAME" ]; then
    echo "Error: Could not determine app name from fly.toml."
    exit 1
fi

echo "Reading secrets from '$ENV_FILE' for app '$APP_NAME'..."

# --- Main Logic ---
secrets_args=()
while IFS= read -r line || [ -n "$line" ]; do
    # Skip comments and empty lines
    if [[ "$line" =~ ^#.* ]] || [[ -z "$line" ]]; then
        continue
    fi
    # Handle carriage return for Windows-edited .env files
    line=$(echo "$line" | tr -d '\r')
    key=$(echo "$line" | cut -d '=' -f 1)
    # Correctly extract value, even if it contains '='
    value=$(echo "$line" | sed -e "s/^$key=//")
    if [ -z "$key" ]; then
        continue
    fi
    # Use printf for robust quoting to handle special characters
    secrets_args+=("$(printf "%s=%s" "$key" "$value")")
    echo "  - Found secret: $key"
done < "$ENV_FILE"

if [ ${#secrets_args[@]} -eq 0 ]; then
    echo "No secrets to set were found in '$ENV_FILE'."
    exit 0
fi

echo ""
echo "The following secrets will be set for the app '$APP_NAME':"
for arg in "${secrets_args[@]}"; do
    key=$(echo "$arg" | cut -d '=' -f 1)
    echo "  - $key"
done
echo ""

read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Operation cancelled by user."
    exit 1
fi

echo "Setting secrets on Fly.io..."
fly secrets set --stage "${secrets_args[@]}"

if [ $? -eq 0 ]; then
    echo "✅ Successfully set ${#secrets_args[@]} secrets. A new release is being created."
else
    echo "❌ An error occurred while setting secrets."
    exit 1
fi

# File: src/config/index.js
// src/config/index.js (version 1.3)
import dotenv from 'dotenv';

dotenv.config();

/**
 * Helper function to safely read and clean string environment variables.
 * It trims whitespace and removes surrounding quotes.
 * @param {string} key The environment variable key.
 * @param {string} defaultValue The default value if the key is not found.
 * @returns {string} The cleaned environment variable value.
 */
function getCleanStringEnv(key, defaultValue = '') {
    let value = process.env[key] || defaultValue;
    value = value.trim();
    if ((value.startsWith('"') && value.endsWith('"')) || (value.startsWith("'") && value.endsWith("'"))) {
        return value.slice(1, -1);
    }
    return value;
}


// --- Core App Behavior ---
export const NODE_ENV = getCleanStringEnv('NODE_ENV', 'development');
export const IS_PRODUCTION = NODE_ENV === 'production';
export const LOG_LEVEL = getCleanStringEnv('LOG_LEVEL', 'info');
export const CONCURRENCY_LIMIT = parseInt(process.env.CONCURRENCY_LIMIT, 10) || 3;
export const FORCE_EMAIL_SEND_DEV = process.env.FORCE_EMAIL_SEND_DEV === 'true';

// --- Database ---
export const MONGO_URI = getCleanStringEnv('MONGO_URI');

// --- LLM Configuration ---
export const KIMI_API_KEY = getCleanStringEnv('KIMI_API_KEY');
export const LLM_MODEL_HEADLINES = getCleanStringEnv('LLM_MODEL_HEADLINES', 'moonshot-v1-8k');
export const LLM_MODEL_ARTICLES = getCleanStringEnv('LLM_MODEL_ARTICLES', 'moonshot-v1-32k');

// --- Scraper Configuration ---
export const SCRAPER_PROXY_URL = getCleanStringEnv('SCRAPER_PROXY_URL') || null;


// --- Thresholds ---
export const HEADLINES_RELEVANCE_THRESHOLD = 30;
export const ARTICLES_RELEVANCE_THRESHOLD = 70;
export const MIN_ARTICLE_CHARS = 150;
export const MAX_ARTICLE_CHARS = 100000;
export const MIN_HEADLINE_CHARS = 15;
export const MAX_HEADLINE_CHARS = 500;
export const AI_BATCH_SIZE = 6;

// --- Email Configuration ---
export const SMTP_CONFIG = {
    host: getCleanStringEnv('SMTP_HOST'),
    port: parseInt(process.env.SMTP_PORT, 10) || 587,
    secure: process.env.SMTP_SECURE === 'true',
    auth: {
        user: getCleanStringEnv('SMTP_USER'),
        pass: getCleanStringEnv('SMTP_PASS'),
    },
    fromAddress: getCleanStringEnv('SMTP_FROM_ADDRESS') || getCleanStringEnv('SMTP_USER'),
    fromName: getCleanStringEnv('SMTP_FROM_NAME', 'Headlines Bot'),
};

export const HEADLINE_RECIPIENTS_STR = getCleanStringEnv('HEADLINE_RECIPIENTS');
export const SUPERVISOR_EMAIL_ENV = getCleanStringEnv('SUPERVISOR_EMAIL', 'your-supervisor-default@example.com');
export const SEND_TO_DEFAULT_SUPERVISOR_ENV = process.env.SEND_TO_DEFAULT_SUPERVISOR === 'true';

// Derived Email Config
export const HEADLINE_RECIPIENTS = HEADLINE_RECIPIENTS_STR.split(',').map(e => e.trim()).filter(Boolean);
export const SUPERVISOR_EMAIL = SUPERVISOR_EMAIL_ENV;
export const SEND_TO_DEFAULT_SUPERVISOR = SEND_TO_DEFAULT_SUPERVISOR_ENV;

// --- Email Template Config ---
export const EMAIL_CONFIG = {
  templateName: 'wealthEvents',
  subject: '🇩🇰 New Danish Banking Opportunities Detected',
  language: 'en',
  brandName: 'Wealth Watch Denmark',
  companyAddress: 'Wealth Watch Inc., Copenhagen, Denmark',
  unsubscribeUrl: '#',
};

export const SUPERVISOR_EMAIL_CONFIG = {
  templateName: 'supervisorReport',
  subject: '⚙️ Hourly Headlines Processing Run Summary',
  language: 'en',
  brandName: 'Headlines Processing Bot',
};

# File: src/config/sources.js
// src/config/sources.js (version 1.0)
// Centralized configuration for web scraping sources.
// This separates the scraper's target configuration from its operational logic.

export const SITES_CONFIG = {
    berlingske: { name: 'Berlingske', url: 'https://www.berlingske.dk/business', selector: 'h4.teaser__title a.teaser__title-link', extract: (el, site) => ({ headline: el.text().trim(), link: new URL(el.attr('href'), site.url).href, source: site.name, newspaper: site.name }) },
    borsen: { name: 'Børsen', url: 'https://borsen.dk/nyheder', useJsonLd: true },
    politiken: { name: 'Politiken', url: 'https://politiken.dk/danmark/oekonomi/', selector: 'article', extract: (el, site) => { const h = el.find('h2, h3, h4').first().text().trim(); const a = el.find('a[href*="/art"]').first().attr('href'); return h && a ? { headline: h, link: new URL(a, site.url).href, source: site.name, newspaper: site.name } : null; } },
    finans: { name: 'Finans.dk', url: 'https://finans.dk/seneste-nyt', selector: 'article a h3', extract: (el, site) => ({ headline: el.text().trim(), link: el.closest('a').attr('href'), source: site.name, newspaper: site.name }) },
    dn_investor: {
        name: 'DN Investor',
        url: 'https://www.dn.no/investor',
        newspaper: 'DN.no',
        selector: 'a[href*="/2-1-"]', 
        extract: (el, site) => {
            const headline = el.find('span.font-mono').text().trim();
            const href = el.attr('href');
            if (headline && href) {
                return { headline, link: new URL(href, site.url).href, source: site.name, newspaper: site.newspaper };
            }
            return null;
        }
    },
    axcel: {
        name: 'Axcel',
        url: 'https://axcel.com/news',
        selector: 'div.news-mask a',
        extract: (el, site) => ({
            headline: el.find('h3').text().trim(),
            link: new URL(el.attr('href'), site.url).href,
            source: site.name,
            newspaper: site.name
        })
    },
    polaris: {
        name: 'Polaris',
        url: 'https://polarisequity.dk/news',
        selector: 'div.fl-post-feed-post',
        extract: (el, site) => {
            const linkEl = el.find('h3.fl-post-feed-title a');
            const headline = linkEl.text().trim();
            const href = linkEl.attr('href');
            if (headline && href) {
                return { headline, link: new URL(href, site.url).href, source: site.name, newspaper: site.name };
            }
            return null;
        }
    },
    finansavisen: {
        name: 'Finansavisen',
        url: 'https://www.finansavisen.no/',
        newspaper: 'Finansavisen',
        selector: 'article.dre-item a.dre-item__title',
        extract: (el, site) => ({
            headline: el.text().trim(),
            link: new URL(el.attr('href'), site.url).href,
            source: site.name,
            newspaper: site.newspaper
        })
    },
    finansavisen_kapital: {
        name: 'Finansavisen Kapital',
        url: 'https://www.finansavisen.no/kapital',
        newspaper: 'Kapital',
        selector: 'article.dre-item a.dre-item__title',
        extract: (el, site) => ({
            headline: el.text().trim(),
            link: new URL(el.attr('href'), site.url).href,
            source: site.name,
            newspaper: site.newspaper
        })
    },
    e24: {
        name: 'E24',
        url: 'https://e24.no/',
        newspaper: 'E24',
        selector: 'a._teaser_bizto_1',
        extract: (el, site) => {
            const headlineEl = el.find('h3._mainTitle_qsmm2_16').clone();
            headlineEl.find('style').remove();
            const headline = headlineEl.text().trim();
            const href = el.attr('href');
            if (headline && href) {
                return { headline, link: new URL(href, site.url).href, source: site.name, newspaper: site.newspaper };
            }
            return null;
        }
    },
    // NEW: Added Nordic Capital
    nordic_capital: {
        name: 'Nordic Capital',
        url: 'https://www.nordiccapital.com/news-views/',
        newspaper: 'Nordic Capital',
        // Each news item is an article with a specific class, containing a link
        selector: 'article.masonry-card--component a',
        extract: (el, site) => {
            const headline = el.find('h3').text().trim();
            const href = el.attr('href');
            if (headline && href) {
                return {
                    headline,
                    link: new URL(href, site.url).href,
                    source: site.name,
                    newspaper: site.newspaper
                };
            }
            return null;
        }
    },
};

export const TEXT_SELECTORS = {
  'Berlingske': '.article-body p',
  'Børsen': '.article-content',
  'Politiken': 'section#js-article-body .font-serif-body-20 p',
  'Finans.dk': 'p.container-text:not([class*="italic"])',
  'DN.no': '.dn-article-top .lead, .dn-content .dn-text p',
  'Axcel': 'div.article-content p',
  'Polaris': 'div.fl-module-fl-post-content p',
  'Finansavisen': '.c-article-regular__body__preamble, .c-article-regular__body p',
  'Kapital': '.c-article-regular__body__preamble, .c-article-regular__body p',
  'E24': 'article p[data-test-tag="lead-text"], article p.hyperion-css-1lemvax',
  'Nordic Capital': '.multi-column-rich-text--content-block .block-content p',
};

# File: src/database.js
// src/database.js (version 1.0)
import mongoose from 'mongoose';
import { MONGO_URI } from './config/index.js';
import { logger } from './utils/logger.js';

export async function connectDatabase() {
    if (!MONGO_URI) {
        logger.fatal('MONGO_URI is not defined in environment variables. Exiting.');
        process.exit(1);
    }

    try {
        logger.info('Attempting to connect to MongoDB...');
        await mongoose.connect(MONGO_URI, {
            serverSelectionTimeoutMS: 5000,
        });
        logger.info('✅ MongoDB connection successful.');
    } catch (error) {
        logger.fatal({ err: error }, '❌ CRITICAL: Failed to establish MongoDB connection.');
        process.exit(1);
    }
}

export async function disconnectDatabase() {
    try {
        await mongoose.disconnect();
        logger.info('MongoDB connection closed.');
    } catch (error) {
        logger.error({ err: error }, 'Error disconnecting from MongoDB.');
    }
}

# File: src/modules/ai/index.js
// src/modules/ai/index.js (version 2.3)
import OpenAI from 'openai';
import pLimit from 'p-limit';
import { KIMI_API_KEY, LLM_MODEL_HEADLINES, LLM_MODEL_ARTICLES, AI_BATCH_SIZE, CONCURRENCY_LIMIT, HEADLINES_RELEVANCE_THRESHOLD } from '../../config/index.js';
import { logger } from '../../utils/logger.js';
import { instructionHeadlines } from '../assessments/instructionHeadlines.js';
import { shotsInput as shotsInputHeadlines, shotsOutput as shotsOutputHeadlines } from '../assessments/shotsHeadlines.js';
import { instructionArticle } from '../assessments/instructionArticle.js';
import { shotsInput as shotsInputArticle, shotsOutput as shotsOutputArticle } from '../assessments/shotsArticle.js';
import { safeExecute, truncateString } from '../../utils/helpers.js';

if (!KIMI_API_KEY) {
    throw new Error('KIMI_API_KEY is not defined in the environment variables.');
}

const kimi = new OpenAI({
    apiKey: 'dummy-key',
    baseURL: 'https://api.moonshot.ai/v1',
    defaultHeaders: { 'Authorization': `Bearer ${KIMI_API_KEY}` },
    timeout: 90 * 1000,
    maxRetries: 1,
});

const limit = pLimit(CONCURRENCY_LIMIT);
let isApiKeyInvalid = false;

// --- UNCHANGED FUNCTIONS ---
export async function performKimiSanityCheck() {
    try {
        logger.info('🔬 Performing Kimi AI service sanity check...');
        const response = await kimi.chat.completions.create({
            model: "moonshot-v1-8k", messages: [{ role: 'user', content: 'What is in one word the name of the capital of France' }], temperature: 0,
        }, { timeout: 20 * 1000 });
        const answer = response.choices[0].message.content.trim().toLowerCase();
        if (answer.includes('paris')) { return true; }
        else {
            logger.fatal(`Kimi sanity check failed. Expected a response containing "Paris", but got: "${answer}".`);
            return false;
        }
    } catch (error) {
        if (error.status === 401) {
            let keyHint = 'The key is either missing, empty, or too short to be valid.';
            if (KIMI_API_KEY && KIMI_API_KEY.length > 8) {
                const maskedKey = `${KIMI_API_KEY.substring(0, 5)}...${KIMI_API_KEY.slice(-4)}`;
                keyHint = `Key being used: ${maskedKey}`;
            }
            logger.fatal(`Kimi sanity check failed due to INVALID API KEY (401). ${keyHint}. Please verify your .env file and the baseURL.`);
        } else {
            logger.fatal({ err: error }, 'Kimi sanity check failed with an unexpected API error.');
        }
        isApiKeyInvalid = true;
        return false;
    }
}

export async function checkModelPermissions(requiredModels) {
    logger.info('🔬 Verifying permissions for configured Kimi models...');
    try {
        const response = await kimi.models.list();
        const availableModels = new Set(response.data.map(model => model.id));
        for (const model of requiredModels) {
            if (!availableModels.has(model)) {
                logger.fatal(`Model validation failed. The configured model "${model}" is not available or you don't have permission. Please check your .env file.`);
                logger.info({ availableModels: [...availableModels] }, 'Available models for your API key:');
                return false;
            }
        }
        return true;
    } catch (error) {
        logger.fatal({ err: error }, 'Failed to retrieve model list from Kimi API.');
        isApiKeyInvalid = true;
        return false;
    }
}

async function generateAssessment(model, instructions, userContent, fewShotInputs = [], fewShotOutputs = []) {
    if (isApiKeyInvalid) { return { error: 'API Key is invalid. Halting further AI assessments.' }; }
    const messages = [ { role: 'system', content: JSON.stringify(instructions) } ];
    fewShotInputs.forEach((input, i) => {
        let shotContent = (typeof input === 'string') ? input : (input && input.articleText);
        if (shotContent && typeof shotContent === 'string') {
            messages.push({ role: 'user', content: shotContent });
            messages.push({ role: 'assistant', content: fewShotOutputs[i] });
        }
    });
    messages.push({ role: 'user', content: userContent });
    const apiCallPromise = safeExecute(() => kimi.chat.completions.create({
        model, messages, response_format: { type: "json_object" }, temperature: 0.1,
    }), {
        errorHandler: (err) => {
            if (err.status === 401) {
                isApiKeyInvalid = true;
                logger.fatal('KIMI API KEY IS INVALID. Halting all AI requests.');
                return { error: 'Invalid Kimi API Key' };
            }
            logger.error(`Kimi API Error: ${err.name} - ${err.message}`);
            return { error: `Kimi API Error: ${err.message}` };
        }
    });
    let timeoutHandle;
    const timeoutPromise = new Promise((resolve) => {
        timeoutHandle = setTimeout(() => resolve({ error: 'External watchdog timed out after 100s' }), 100 * 1000);
    });
    const result = await Promise.race([apiCallPromise, timeoutPromise]);
    clearTimeout(timeoutHandle);
    if (result.error) return result;
    try {
        return JSON.parse(result.choices[0].message.content);
    } catch (parseError) {
        logger.error(`JSON Parse Error: ${parseError.message}`);
        return { error: "JSON Parsing Error" };
    }
}

// --- REFACTORED BATCH ASSESSMENT LOGGING ---
export async function assessHeadlinesInBatches(articles) {
    const batches = [];
    for (let i = 0; i < articles.length; i += AI_BATCH_SIZE) {
        batches.push(articles.slice(i, i + AI_BATCH_SIZE));
    }
    logger.info(`Assessing ${articles.length} headlines in ${batches.length} batches.`);
    const allAssessedPromises = [];
    let completedBatches = 0;

    for (const batch of batches) {
        allAssessedPromises.push(
            limit(async () => {
                const headlinesText = batch.map(a => a.headline).join('\n- ');
                const response = await generateAssessment(LLM_MODEL_HEADLINES, instructionHeadlines, headlinesText, shotsInputHeadlines, shotsOutputHeadlines);
                
                completedBatches++;
                
                // --- NEW CONCISE LOGGING ---
                if (response && response.assessment && Array.isArray(response.assessment)) {
                    logger.info(`--- Batch ${completedBatches}/${batches.length} Results ---`);
                    batch.forEach((article, i) => {
                        const assessment = response.assessment[i];
                        if (assessment && typeof assessment.relevance_headline === 'number') {
                            const score = assessment.relevance_headline;
                            const comment = assessment.assessment_headline || 'No comment.';
                            const emoji = score >= HEADLINES_RELEVANCE_THRESHOLD ? '✅' : '❌';
                            logger.info(`${emoji} [${score}] ${truncateString(article.headline, 70)} | ${truncateString(comment, 60)}`);
                        } else {
                            logger.warn(`- Malformed assessment for: ${truncateString(article.headline, 70)}`);
                        }
                    });
                } else {
                    logger.error(`❌ Headline assessment failed for batch ${completedBatches}/${batches.length}. Reason: ${response.error || 'Malformed response'}`);
                }
                // --- END NEW LOGGING ---

                if (response.error || !response.assessment || !Array.isArray(response.assessment) || response.assessment.length !== batch.length) {
                    return batch.map(article => ({ ...article, relevance_headline: 0, assessment_headline: response.error || 'AI assessment failed.' }));
                }

                return batch.map((article, i) => ({ ...article, ...response.assessment[i] }));
            })
        );
    }
    
    const assessedBatches = await Promise.all(allAssessedPromises);
    logger.info(`Finished assessing all ${batches.length} batches.`);
    return assessedBatches.flat();
}

export async function assessArticleContent(article) {
    logger.info(`Assessing content for: "${truncateString(article.headline, 60)}"`);
    const articleText = article.articleContent.contents.join('\n');
    const response = await generateAssessment(LLM_MODEL_ARTICLES, instructionArticle, articleText, shotsInputArticle, shotsOutputArticle);
    if (response.error) {
        logger.error(`Article assessment failed for ${article.link}.`);
        return { ...article, error: `AI Error: ${response.error}` };
    }
    return { ...article, ...response, error: null };
}

# File: src/modules/assessments/instructionArticle.js
// File: src/modules/assessments/instructionArticle.js

export const instructionArticle = {
  whoYouAre:
    'You are a private wealth relevance analyst specialized in Scandinavian media.',

  whatYouDo:
    'You analyze full-text articles. Your primary goal is to identify if they report a direct, substantial private wealth event (over $30 million) benefiting private Scandinavian individuals or families. Additionally, you flag articles discussing significant business activities, strategies, or opinions expressed by known Danish/Dutch Rich List individuals concerning their core businesses, as these may have indirect or future wealth implications.',

  writingStyle:
    'Use concise, factual English. Avoid speculation where possible, but acknowledge implied significance for Rich List individuals. Maintain formal tone.',

  outputFormatDescription:
    'Respond only with a valid JSON object using this structure: { "topic": "Short summary", "relevance_article": 95, "category": 1, "assessment_article": "Reason", "amount": 500, "contacts": ["Name (email@example.com)"], "background": "Contextual info" }',

  guidelines: `
Focus on:
1.  **Direct Wealth Events**: Articles involving direct wealth transfers (company sales, IPOs, M&A, inheritances, significant asset sales) to named Scandinavian individuals/families where the new wealth clearly exceeds $30 million. This includes transactions within holding companies clearly owned by such families (e.g., KIRKBI, APMH Holding, Bestseller's holding company) where proceeds benefit the family. Obituaries of very wealthy individuals are also key.

2.  **Rich List Individual Activity (SPECIAL ATTENTION)**: Articles featuring prominent Scandinavian Rich List individuals (e.g., **Martin Thorborg**, Anders Holch Povlsen, Kirk Kristiansen family members, etc.) discussing:
    *   Significant strategic decisions for their main businesses.
    *   Major investments or divestments, even if the article doesn't explicitly state a >$30M personal gain but the context implies substantial financial activity.
    *   Interviews or detailed reports where they speak at length about their company's performance, market position, or future plans that could significantly impact their wealth.
    *   **For these Rich List cases, the $30M direct threshold can be relaxed if the activity is clearly significant to their primary wealth-generating entities or a substantial new venture.** The assessment should reflect *why* it's relevant due to their status and the nature of the discussion.

Exclude any articles primarily about:
- Companies or projects without a clearly identified private Scandinavian individual/family beneficiary (unless it's a known Rich List holding company).
- Foreign or institutional beneficiaries (unless it's an acquisition *from* a Danish/Dutch private owner).
- Indirect economic impact, general market analysis, or company performance reports *unless* they directly quote a Rich List owner discussing significant strategic implications for their wealth/company.
- Minor news, public appearances not related to core business strategy or major financial decisions.
- Philanthropy.
`,

  scoring: `
Score 90-100 for:
-   Clear, direct wealth events >$30M for Danish/Dutch individuals/families.
-   Articles detailing significant business activities or strategic pronouncements by top-tier Rich List individuals (e.g., Martin Thorborg discussing a major pivot for Dinero/Visma, Anders Holch Povlsen on Bestseller's global strategy that has clear financial scale). The assessment should note "High relevance due to [Rich List Person]'s strategic involvement with [Company/Venture]."

Score 70-89 for:
-   Strongly implied (but not fully detailed) wealth events >$30M.
-   Interviews or articles where a Rich List individual discusses their business in a way that indicates significant ongoing financial activity or potential future wealth impact, even if not a direct transaction (e.g., "Martin Thorborg outlines future AI strategy for his business interests"). Assessment: "Moderate-high relevance due to [Rich List Person]'s statements on significant business direction."

Score 30-69 for:
-   Speculative wealth events, smaller transactions (<$30M), or news about Rich List individuals that is business-related but less impactful or less clear on financial implications.

Score 0-29 for:
-   Irrelevant news, general company news without Rich List owner strategic input, or Rich List mentions unrelated to their core wealth/business.
`,

  vitals:
    'If the article references "Goldman Sachs", "London" or "Morgan Stanley" in the context of a deal involving Danish/Dutch private entities, it MUST be scored 100 for relevance_article. Pay extremely close attention to articles involving known Danish/Dutch Rich List individuals and their core business activities; these are often highly relevant even if not a direct sale announcement.',

  promptingTips:
    'Break down article structure: identify named subjects, companies. Determine if personal wealth was created or if a Rich List individual is making significant strategic statements about their business. For Rich List individuals, consider the *implication* of their statements/actions on their wealth and businesses, not just explicit transaction amounts.',

  reiteration:
    'Only respond with a properly formatted JSON object. If an article is about a Rich List person discussing their business significantly, assign a relevance score (typically 70+) reflecting this importance, even if a $30M transaction is not detailed. Clearly state the reason in the assessment.',
};

# File: src/modules/assessments/instructionHeadlines.js
// src/modules/assessments/instructionHeadlines.js
export const instructionHeadlines = {
  whoYouAre: 'You are a financial news relevance analyst.',
  whatYouDo:
    'You assess whether Scandinavian news headlines describe immediate, substantial private wealth events.',
  guidelines: `
Include only:
- Major liquidity events for private Scandinavian individuals or families (e.g., company sales, IPOs benefiting founders, substantial asset sales) generating >$50M (or DKK/EUR equivalent).
- Obituaries of ultra high net worth Scandinavian individuals leading to substantial wealth transfer/inheritance.
- Significant transactions or capital events within privately-held/family-owned holding companies of Scandinavian rich list families that clearly indicate a substantial change in the family's private wealth (e.g., large dividend payouts from holding to family, sale of a major subsidiary by the holding company where proceeds directly benefit the family).
- Any headlines directly indicating substantial (>$50M) wealth generation or transfer for Scandinavian rich list families or their primary business entities where the family is the clear beneficiary (e.g., "Bestseller owner Anders Holch Povlsen acquires major real estate portfolio for DKK 1 billion", "Grundfos owner foundation distributes DKK 500 million to Due Jensen family").
- Significant real estate transactions (>$50M or DKK/EUR equivalent) involving clearly identified private Scandinavian individuals/families.
- **SPECIAL ATTENTION**: News involving known Danish Rich List individuals like **Martin Thorborg**, Anders Holch Povlsen, the Kirk Kristiansen family (LEGO), the Holch Povlsen family (Bestseller), the Due Jensen family (Grundfos), the Louis-Hansen family (Coloplast), the Kasprzak family (ECCO) etc., especially related to their significant business activities, investments, or sales, should be scored with high relevance (70-100) if a wealth event is plausible, even if the exact amount is not stated but implied to be substantial. Examples include company sales/acquisitions, large personal investments. General commentary or public appearances are not relevant.

Strictly exclude:
- General corporate news such as expansions, new product launches, operational performance (profits/losses of publicly traded companies or even private companies unless it's a liquidity event for the owners), public fundraising, general tax changes, or non-private Scandinavian events unless directly tied to a rich list family's private wealth as per "Include only" criteria.
- Headlines without direct, immediate, and substantial (>$50M) wealth impact for private Scandinavian individuals/families (unless it's a Rich List individual per "SPECIAL ATTENTION" rule where significance is implied).
- Foreign corporate or public institution activity, unless it's a direct acquisition/sale involving a Danish/Dutch private individual/family generating >$50M.
- General market commentary, stock performance of public companies (unless it's an IPO benefiting founders significantly), or economic trends.
- Philanthropic donations by foundations or individuals.
- Appointments to boards or executive positions, even if highly paid.

Relevance Scoring:
- 90–100: Clear and substantial private wealth gain/transfer (>$50M or DKK/EUR equivalent) for Scandinavian individuals/families; news directly concerning Danish/Dutch rich list families (per "SPECIAL ATTENTION" list) and significant activities of their primary businesses or holding companies that clearly and immediately impact family wealth. Obituaries of UHNW Danish/Dutch individuals implying substantial wealth transfer.
- 70–89: Likely or partial substantial wealth gain or transaction (potentially >$50M, or an IPO of a significant family-owned/founded company where founders retain large stakes). News about significant investments/divestments by rich list family holdings where the direct private benefit to the family is strongly implied but not explicitly stated as >$50M immediately. For Rich List individuals (like Martin Thorborg), this score can apply if the event (e.g., "Martin Thorborg erkender: Kunstig intelligens kan...") suggests significant business involvement or strategy shift that could imply wealth impact, even if not a direct transaction headline.
- 50–69: Moderate or indirect wealth gain (typically <$50M but still a clear private wealth event).
- 30–49: Minor or future potential gain, or wealth event of unclear substantiality for a private individual/family.
- 0–29: No private wealth relevance, or event clearly below significance thresholds, or general corporate news of family-owned businesses without direct private wealth impact on the family.
`,
  scoring: `
Examples of High Relevance (90–100):
- "Danish family sells tech company for EUR 150M"
- "LEGO heir passes away leaving substantial estate"
- "Founders of Dutch fintech Adyen see wealth soar after IPO with EUR 500M personal gain"
- "Grundfos owner Poul Due Jensen's family holding company, KIRKBI A/S, acquires significant UK property portfolio for DKK 2 billion"
- "Bestseller owner Anders Holch Povlsen receives DKK 1 billion dividend from family holding company"
- "Martin Thorborg's company Dinero acquired by Visma" 
- "Anders Holch Povlsen invests DKK 500 million in new green tech venture"

Examples of Moderate/High Relevance (70-89 for Rich List):
- "Martin Thorborg's new AI venture secures seed funding" (Implies potential future wealth, activity of rich list person)
- "Business-update: Martin Thorborg erkender: Kunstig intelligens kan true hans forretning" (Significant strategic statement from Rich List individual about their business - score 70-80 to flag for review)


Examples of Low Relevance (0–29):
- "Boeing raises billions to pay debts"
- "Rockwool plans global expansion"
- "Homeowners to receive tax relief"
- "Grundfos (the company) announces record profits"
- "Danfoss heir appointed to new board" 
- "Martin Thorborg gives a public lecture on entrepreneurship" (Not a wealth event for him)
`,
  vitals: `
VITAL: Any mention of "Goldman Sachs" or "Morgan Stanley" or "London" must result in a relevance score of 100.
**VITAL: Headlines mentioning names from the Danish/Dutch Rich List (e.g., Martin Thorborg, Holch Povlsen, Kirk Kristiansen) involved in significant business transactions, strategy announcements for their core businesses, or substantial investments should be considered highly relevant (score 70-100). General commentary or public appearances are low relevance.**
`,
  outputFormatDescription: `
Respond in English with a valid JSON object, exactly formatted like below.
Like shown here, it is vital that your response has a top-level "assessment" key:
{
  "assessment": [
    {
      "relevance_headline": 95,
      "assessment_headline": "Imminent personal wealth generation due to company sale."
    }
  ]
}
NEVER RETURN A PLAIN ARRAY.
`,
  writingStyle: 'Be precise and analytical. Use clear financial terminology.',
  reiteration: 'All assessments must adhere to the criteria above. Pay special attention to Rich List individuals and their business activities.',
  promptingTips:
    'Reflect on wealth creation context. Distinguish between corporate performance and direct private wealth events for individuals/families. Apply scoring rules carefully. Explicitly consider if named individuals are on the Danish/Dutch Rich List and if the news relates to their core business or significant financial activities.',
};

# File: src/modules/assessments/shotsArticle.js
// File: headlines_mongo/src/modules/assessments/shotsArticle.js

export const shotsInput = [
  { articleText: 'Nyt anlæg ved Esbjerg skal producere klimavenlig brint' },
  { articleText: 'Aarstiderne sold to giant' },
  {
    articleText:
      'Many homeowners will see lower property taxes in 2025 and 2026',
  },
  { articleText: 'Danish family sells company for $500M' },
  { articleText: 'Harald Nyborg billionaire establishes new discount chain' },
  {
    articleText:
      'New green energy plant in Esbjerg to produce climate-friendly hydrogen',
  },
  { articleText: 'Homeowners to receive tax relief in 2025' },
  { articleText: 'CEO of family-owned Danish tech firm sells for $120M' },
  { articleText: 'Danish logistics company IPO to benefit founder' },
  { articleText: 'Rockwool plans massive global expansions' },
  {
    articleText: 'Danish Crowns fyringsrunde er gået hårdt ud over hovedsædet',
  },
  { articleText: 'Boeing raises $19 billion to repay debts' },
  {
    articleText: 'Homeowners with excessive property tax bills may receive aid',
  },
  { articleText: 'Crisis-hit Boeing plans to raise billions to repay debt' },
  { articleText: 'Novo Nordisk Foundation profits from new obesity drug' },
  { articleText: 'Danish billionaire invests in U.S. tech startup' },
  { articleText: 'Maersk Group reports 30% revenue increase' },
  {
    articleText: 'Danish entrepreneur inherits $60 million from family estate',
  },
  { articleText: 'Foreign investor buys stake in Danish public company' },
];

// --- KEY FIX: All shot outputs for a JSON response must be a STRINGIFIED JSON object. ---
// The AI is trained to respond with a JSON object, so its "speech" in the few-shot examples
// must be a string that represents that JSON object.
export const shotsOutput = [
  JSON.stringify({
    topic: 'Green hydrogen plant in Esbjerg',
    relevance_article: 10,
    category: 0,
    assessment_article:
      'Infrastructure project with no direct personal wealth transfer.',
    amount: 0,
    contacts: [],
    background: 'Public or corporate energy initiative.',
  }),
  JSON.stringify({
    topic: 'Aarstiderne sold to giant',
    relevance_article: 95,
    category: 1,
    assessment_article: 'Clear private wealth event for Danish founders.',
    amount: 100,
    contacts: ['Søren Ejlersen'],
    background: 'Sale of private Danish company.',
  }),
  JSON.stringify({
    topic: 'Property tax cuts for homeowners',
    relevance_article: 20,
    category: 0,
    assessment_article: 'Tax relief is not a substantial direct wealth event.',
    amount: 0,
    contacts: [],
    background: 'Policy affecting many, not enriching individuals.',
  }),
  JSON.stringify({
    topic: 'Danish family sells company for $500M',
    relevance_article: 100,
    category: 1,
    assessment_article:
      'Substantial wealth event clearly benefiting a Danish family.',
    amount: 500,
    contacts: ['Family Name'],
    background: 'Private business transaction.',
  }),
  JSON.stringify({
    topic: 'Billionaire starts new chain',
    relevance_article: 40,
    category: 0,
    assessment_article:
      'No confirmed wealth transfer; potential future impact.',
    amount: 0,
    contacts: [],
    background: 'New business launch.',
  }),
  JSON.stringify({
    topic: 'Esbjerg green energy plant',
    relevance_article: 10,
    category: 0,
    assessment_article: 'Corporate project, no direct benefit to individuals.',
    amount: 0,
    contacts: [],
    background: 'Energy infrastructure development.',
  }),
  JSON.stringify({
    topic: 'Homeowner tax relief in 2025',
    relevance_article: 20,
    category: 0,
    assessment_article: 'Public policy benefit, not a personal wealth event.',
    amount: 0,
    contacts: [],
    background: 'Government fiscal policy.',
  }),
  JSON.stringify({
    topic: 'Tech CEO sells firm for $120M',
    relevance_article: 95,
    category: 1,
    assessment_article:
      'Substantial wealth event for private Danish individual.',
    amount: 120,
    contacts: ['CEO Name'],
    background: 'Private tech company acquisition.',
  }),
  JSON.stringify({
    topic: 'IPO benefits Danish logistics founder',
    relevance_article: 90,
    category: 1,
    assessment_article: 'Clear private wealth generation through IPO.',
    amount: 150,
    contacts: ['Founder Name'],
    background: 'Public offering of private firm.',
  }),
  JSON.stringify({
    topic: 'Rockwool global expansion',
    relevance_article: 10,
    category: 0,
    assessment_article: 'Corporate strategy, no individual wealth generation.',
    amount: 0,
    contacts: [],
    background: 'Public company operations.',
  }),
  JSON.stringify({
    topic: 'Danish Crown layoffs',
    relevance_article: 0,
    category: 0,
    assessment_article: 'No wealth event present.',
    amount: 0,
    contacts: [],
    background: 'Workforce reduction.',
  }),
  JSON.stringify({
    topic: 'Boeing debt fundraising',
    relevance_article: 0,
    category: 0,
    assessment_article:
      'Foreign financial activity irrelevant to Danish private wealth.',
    amount: 0,
    contacts: [],
    background: 'U.S. corporate strategy.',
  }),
  JSON.stringify({
    topic: 'Aid for property tax overpayments',
    relevance_article: 15,
    category: 0,
    assessment_article:
      'Financial support, not substantial private wealth transfer.',
    amount: 0,
    contacts: [],
    background: 'Public compensation mechanism.',
  }),
  JSON.stringify({
    topic: 'Crisis-hit Boeing raises capital',
    relevance_article: 0,
    category: 0,
    assessment_article: 'Foreign corporate debt issue, not relevant.',
    amount: 0,
    contacts: [],
    background: 'Financial maneuver by U.S. company.',
  }),
  JSON.stringify({
    topic: 'Novo Nordisk Foundation profits',
    relevance_article: 10,
    category: 0,
    assessment_article:
      'Institutional profit, no personal Danish wealth event.',
    amount: 0,
    contacts: [],
    background: 'Public foundation income.',
  }),
  JSON.stringify({
    topic: 'Danish billionaire invests abroad',
    relevance_article: 20,
    category: 0,
    assessment_article: 'Investment activity without clear wealth increase.',
    amount: 0,
    contacts: [],
    background: 'Cross-border financial move.',
  }),
  JSON.stringify({
    topic: 'Maersk revenue up 30%',
    relevance_article: 5,
    category: 0,
    assessment_article:
      'Corporate earnings report, not a private wealth event.',
    amount: 0,
    contacts: [],
    background: 'Listed company performance.',
  }),
  JSON.stringify({
    topic: 'Danish entrepreneur inherits $60M',
    relevance_article: 95,
    category: 1,
    assessment_article: 'Direct substantial wealth transfer via inheritance.',
    amount: 60,
    contacts: ['Entrepreneur Name'],
    background: 'Family wealth transition.',
  }),
  JSON.stringify({
    topic: 'Foreign investor buys Danish shares',
    relevance_article: 10,
    category: 0,
    assessment_article: 'No direct benefit to Danish individuals.',
    amount: 0,
    contacts: [],
    background: 'Public market transaction.',
  }),
];


# File: src/modules/assessments/shotsHeadlines.js
// File: headlines_mongo/src/modules/assessments/shotsHeadlines.js
export const shotsInput = [
  // --- DEFINITIVE FIX: The input for each shot must be a SINGLE STRING, ---
  // --- matching exactly how the final prompt is constructed. ---
  [
    'Rockwool står foran massive udvidelser over hele kloden',
    'Boeing henter 145 mia. kr.',
    'Boligejere med for stor grundskyldsregning har udsigt til hjælp',
    'Kriseramte Boeing vil rejse milliarder for at tilbagebetale gæld',
    'Aarstiderne solgt til gigant',
    'Danish family sells company for $500M',
  ].join('\n- '),

  [
    'Local football match results',
    'New Danish tech startup launched',
    'Vestas CEO buys shares',
    'Vestas CEO sells significant shares',
    'Maersk heir sells estate in Copenhagen',
    'Danish lottery winner claims prize',
  ].join('\n- '),

  [
    'A.P. Moller Foundation donates $100 million to charity',
    'LEGO family (KIRKBI A/S) in acquisition talks for rival toy company for DKK 5 billion',
    'Danfoss heir (Bitten & Mads Clausen Foundation) announces succession plan for family business leadership',
    'Widex and Demant plan to merge operations',
    'Novo Nordisk (public company) announces stock split',
    '3Shape (privately owned) is working on an IPO',
  ].join('\n- '),

  [
    'Grundfos (company) reports record annual profits',
    'Grundfos owner (Poul Due Jensen Foundation) announces DKK 300 million dividend distribution to family members',
    'Bestseller (company) to open 50 new stores in Germany',
    'Bestseller owner Anders Holch Povlsen personally acquires Scottish estate for DKK 150 million',
    'Coloplast (public company) CEO receives large bonus',
    'ECCO Sko A/S (family owned) posts strong revenue growth',
  ].join('\n- '),

  [
    'Martin Thorborg erkender: Kunstig intelligens kan true hans forretning',
    "Martin Thorborg's AI Startup Secures Funding",
  ].join('\n- '),
];

export const shotsOutput = [
  JSON.stringify({
    assessment: [
      {
        relevance_headline: 10,
        assessment_headline:
          'Corporate expansion (Rockwool is public), no direct private wealth generation for Danish individuals.',
      },
      {
        relevance_headline: 0,
        assessment_headline:
          'Foreign corporate activity, no relevance to Danish private wealth.',
      },
      {
        relevance_headline: 20,
        assessment_headline:
          'Tax relief provides benefit, but not a substantial direct wealth transfer.',
      },
      {
        relevance_headline: 0,
        assessment_headline:
          'Foreign corporate debt repayment, no relevance to Danish private wealth.',
      },
      {
        relevance_headline: 95,
        assessment_headline:
          'Acquisition likely results in substantial wealth for Danish founders/owners.',
      },
      {
        relevance_headline: 100,
        assessment_headline:
          'Clear substantial private wealth event for Danish family.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      { relevance_headline: 0, assessment_headline: 'Not a wealth event.' },
      {
        relevance_headline: 10,
        assessment_headline:
          'New company, no immediate substantial wealth transfer.',
      },
      {
        relevance_headline: 5,
        assessment_headline:
          'Public market activity by an individual, not a substantial private wealth generation event.',
      },
      {
        relevance_headline: 30,
        assessment_headline:
          'Share sale by individual, possibly some personal gain, unlikely to exceed $50M based on headline alone.',
      },
      {
        relevance_headline: 95,
        assessment_headline:
          "Clear wealth event (>$50M implied by 'Maersk heir' and 'estate in Copenhagen') benefiting Danish private individual.",
      },
      {
        relevance_headline: 50,
        assessment_headline:
          'Private wealth event, but likely below $50M threshold.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        relevance_headline: 0,
        assessment_headline:
          'Foundation donation, no personal private wealth involved for the family.',
      },
      {
        relevance_headline: 95,
        assessment_headline:
          "Significant acquisition by rich list family's holding company (KIRKBI A/S), likely impacting family's ultimate wealth substantially.",
      },
      {
        relevance_headline: 30,
        assessment_headline:
          'Succession planning in a family business (Danfoss via foundation) suggests future wealth considerations, not an immediate substantial wealth event for individuals.',
      },
      {
        relevance_headline: 70,
        assessment_headline:
          'Merger of two significant Danish-founded (though Sivantos/Widex is now WS Audiology, part foreign-owned) companies, potential for substantial wealth implications for any remaining Danish private owners if value is realized.',
      },
      {
        relevance_headline: 0,
        assessment_headline:
          'Public market action by a public company, no personal private wealth transfer.',
      },
      {
        relevance_headline: 80,
        assessment_headline:
          'Potential substantial private wealth event if IPO proceeds benefit Danish founders/owners significantly.',
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        relevance_headline: 0,
        assessment_headline:
          'Corporate performance of Grundfos (company), not a direct private wealth event for the Due Jensen family unless specific large dividend to family is mentioned.',
      },
      {
        relevance_headline: 95,
        assessment_headline:
          'Clear substantial private wealth event for the Danish Due Jensen family via distribution from their foundation.',
      },
      {
        relevance_headline: 0,
        assessment_headline:
          'Corporate expansion of Bestseller (company), not a direct private wealth event for Anders Holch Povlsen.',
      },
      {
        relevance_headline: 90,
        assessment_headline:
          'Substantial personal acquisition by Danish rich list individual Anders Holch Povlsen, a clear private wealth event.',
      },
      {
        relevance_headline: 10,
        assessment_headline:
          'Executive compensation in a public company, not a private wealth generation event of the type tracked (e.g. founder liquidity).',
      },
      {
        relevance_headline: 10,
        assessment_headline:
          "Corporate performance of ECCO (family-owned company), but headline doesn't specify a direct, substantial wealth event for the Toosbuy Kasprzak family.",
      },
    ],
  }),
  JSON.stringify({
    assessment: [
      {
        relevance_headline: 75,
        assessment_headline:
          "High relevance due to Martin Thorborg's strategic statements about his business's core vulnerability, implying potential significant future actions.",
      },
      {
        relevance_headline: 85,
        assessment_headline:
          'High relevance. A new venture by a known Rich List individual (Martin Thorborg) securing funding is a significant potential wealth event.',
      },
    ],
  }),
];


# File: src/modules/email/components/articleFormatter.js
// src/modules/email/components/articleFormatter.js (version 2.0)
import { logger } from '../../../utils/logger.js';
import { truncateString } from '../../../utils/helpers.js';

function createArticleCard(article) {
    const {
        link,
        headline,
        source,
        summary,
        assessmentText,
        relevanceScore,
        callToActionText,
    } = article;

    const scoreColor = relevanceScore >= 80 ? '#27ae60' : relevanceScore >= 50 ? '#f39c12' : '#c0392b';

    return `
    <div style="border: 1px solid #e0e0e0; border-radius: 8px; margin-bottom: 20px; padding: 20px; background-color: #ffffff; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
        <h3 style="margin-top: 0; margin-bottom: 10px; font-size: 18px; color: #333;">
            <a href="${link}" style="color: #007bff; text-decoration: none;">${headline}</a>
        </h3>
        <p style="margin: 0 0 15px; font-size: 14px; color: #777;"><strong>Source:</strong> ${source}</p>
        <p style="margin: 0 0 15px; font-size: 15px; color: #555; line-height: 1.6;">${summary}</p>
        <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
            <p style="margin: 0; font-size: 14px; color: #333;">
                <strong>System Assessment:</strong> <span style="font-weight: bold; color: ${scoreColor};">[Score: ${relevanceScore}]</span> ${assessmentText}
            </p>
        </div>
        <a href="${link}" style="display: inline-block; background-color: #007bff; color: #ffffff; padding: 10px 15px; border-radius: 5px; text-decoration: none; font-weight: bold; font-size: 14px;">
            ${callToActionText}
        </a>
    </div>
    `;
}

export function formatArticleForEmail(article) {
    if (!article || typeof article !== 'object' || !article.link || !article.headline) {
        logger.warn(`formatArticleForEmail: Invalid article object provided.`, { articlePreview: article });
        return `<p style="color:red;">Error: Article data was invalid.</p>`;
    }

    const genericArticleData = {
        link: article.link,
        headline: article.headline,
        source: article.source || article.newspaper || 'N/A',
        summary: 'No summary available.',
        assessmentText: article.assessment_article || article.assessment_headline || 'Assessment not available.',
        relevanceScore: article.relevance_article ?? article.relevance_headline ?? 'N/A',
        callToActionText: 'Read Full Article →',
    };

    if (article.articleContent && typeof article.articleContent === 'object') {
        const { contents } = article.articleContent;
        if (contents && Array.isArray(contents) && contents.length > 0) {
            genericArticleData.summary = truncateString(contents.join(' '), 250);
        }
    }
    
    if (genericArticleData.summary === 'No summary available.') {
      genericArticleData.summary = truncateString(genericArticleData.assessmentText, 250);
    }

    try {
        return createArticleCard(genericArticleData);
    } catch (error) {
        logger.error(`Error creating article card for email: "${article.headline}"`, { errorMessage: error.message });
        return `<p style="color:red;">Error formatting article: ${truncateString(article.headline, 50)}</p>`;
    }
}

# File: src/modules/email/components/emailBodyBuilder.js
// src/modules/email/components/emailBodyBuilder.js (version 2.0)
import { logger } from '../../../utils/logger.js';
import { EMAIL_CONFIG } from '../../../config/index.js';
import { LOGO_URL } from '../constants.js';
import { formatArticleForEmail } from './articleFormatter.js';

function createEmailWrapper(bodyContent) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${EMAIL_CONFIG.subject}</title>
    </head>
    <body style="margin: 0; padding: 0; font-family: Helvetica, Arial, sans-serif; background-color: #f4f4f4;">
        <table width="100%" border="0" cellspacing="0" cellpadding="0" style="background-color: #f4f4f4;">
            <tr>
                <td align="center">
                    <table width="600" border="0" cellspacing="0" cellpadding="20" style="max-width: 600px; width: 100%; background-color: #ffffff; margin-top: 20px; margin-bottom: 20px;">
                        <tr>
                            <td>
                                ${bodyContent}
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    </body>
    </html>`;
}

export function createEmailBody(articles) {
    if (!Array.isArray(articles) || articles.length === 0) {
        logger.warn('createEmailBody: No articles provided to build email body.');
        return null;
    }

    const formattedArticlesHtml = articles.map(formatArticleForEmail).join('');

    const mainContent = `
        <div style="text-align: center; padding-bottom: 20px; border-bottom: 1px solid #eeeeee;">
            <img src="${LOGO_URL}" alt="${EMAIL_CONFIG.brandName} Logo" style="max-width: 150px; height: auto;">
        </div>
        <h1 style="color: #333333; text-align: center; margin-top: 20px;">${EMAIL_CONFIG.subject}</h1>
        <p style="font-size: 16px; color: #555555; text-align: left;">
            Good morning,
            <br><br>
            Here are the latest potential wealth events identified by the system for your review:
        </p>
        ${formattedArticlesHtml}
        <p style="font-size: 16px; color: #555555; text-align: left;">
            Best Regards,<br>The Wealth Insight Team
        </p>
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eeeeee; font-size: 12px; color: #888888;">
            <p>${EMAIL_CONFIG.brandName} | ${EMAIL_CONFIG.companyAddress}</p>
            <p><a href="${EMAIL_CONFIG.unsubscribeUrl}" style="color: #888888;">Unsubscribe</a></p>
        </div>
    `;

    return createEmailWrapper(mainContent);
}

# File: src/modules/email/components/supervisorEmailBodyBuilder.js
// src/modules/email/components/supervisorEmailBodyBuilder.js (version 2.0)
import { logger } from '../../../utils/logger.js';
import { SUPERVISOR_EMAIL_CONFIG, HEADLINES_RELEVANCE_THRESHOLD, ARTICLES_RELEVANCE_THRESHOLD } from '../../../config/index.js';
import { truncateString } from '../../../utils/helpers.js';
import { LOGO_URL } from '../constants.js';

function escapeHtml(unsafe) {
    if (unsafe === null || unsafe === undefined) return '';
    return String(unsafe)
         .replace(/&/g, "&")
         .replace(/</g, "<")
         .replace(/>/g, ">")
         .replace(/"/g, "'")
         .replace(/'/g, "'");
}

function getArticleStatusForReport(article) {
    if (!article || typeof article !== 'object') return 'Invalid Article Data';
    if (article.storage_error_initial_headline_data) return `Storage Error: ${truncateString(String(article.storage_error_initial_headline_data), 40)}`;
    if (article.error) return `Processing Error: ${truncateString(String(article.error), 40)}`;
    if (article.enrichment_error) return `Enrichment Error: ${truncateString(String(article.enrichment_error), 40)}`;
    
    const headlineRelevant = article.relevance_headline >= HEADLINES_RELEVANCE_THRESHOLD;
    const articleRelevant = article.relevance_article >= ARTICLES_RELEVANCE_THRESHOLD;

    if (articleRelevant) return 'Relevant (Full Article)';
    if (headlineRelevant && !articleRelevant) return 'Headline Relevant, Content Not';
    if (headlineRelevant) return 'Headline Relevant, Content Not Assessed';
    return 'Low Headline Relevance';
}


function createSupervisorEmailWrapper(bodyContent) {
    return `
    <!DOCTYPE html>
    <html>
    <head><title>${SUPERVISOR_EMAIL_CONFIG.subject}</title></head>
    <body style="font-family: sans-serif; background-color: #f0f0f0; padding: 20px;">
        <table width="95%" border="0" cellspacing="0" cellpadding="20" style="max-width: 1200px; margin: auto; background-color: #ffffff;">
            <tr><td>${bodyContent}</td></tr>
        </table>
    </body>
    </html>`;
}

export function createSupervisorEmailBody(allProcessedArticles, runStats) {
    const runTimestamp = new Date().toLocaleString('en-GB', { timeZone: 'Europe/Copenhagen' });
    
    let statsHtml = `<h2>Run Statistics</h2><ul>`;
    for (const [key, value] of Object.entries(runStats)) {
        const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
        statsHtml += `<li><strong>${formattedKey}:</strong> ${value}</li>`;
    }
    statsHtml += `</ul>`;

    const sortedArticles = [...allProcessedArticles].sort((a, b) => (b.relevance_article || b.relevance_headline || 0) - (a.relevance_article || a.relevance_headline || 0));

    let articlesTableHtml = `<h2>Processed Articles Details</h2>
    <table border="1" cellpadding="5" cellspacing="0" style="width: 100%; border-collapse: collapse; font-size: 12px;">
        <thead style="background-color: #f8f8f8;">
            <tr>
                <th>Headline</th><th>Source</th><th>HL Score</th><th>Art. Score</th><th>Status/Error</th><th>Emailed?</th>
            </tr>
        </thead>
        <tbody>`;

    if (sortedArticles.length > 0) {
        sortedArticles.forEach(article => {
            articlesTableHtml += `
            <tr>
                <td><a href="${escapeHtml(article.link)}">${truncateString(escapeHtml(article.headline), 60)}</a></td>
                <td>${escapeHtml(article.newspaper)}</td>
                <td>${article.relevance_headline ?? 'N/A'}</td>
                <td>${article.relevance_article ?? 'N/A'}</td>
                <td>${escapeHtml(getArticleStatusForReport(article))}</td>
                <td>${article.emailed ? 'Yes' : (article.email_skipped_reason || 'No')}</td>
            </tr>`;
        });
    } else {
        articlesTableHtml += `<tr><td colspan="6">No articles were processed in this run.</td></tr>`;
    }
    articlesTableHtml += `</tbody></table>`;
    
    const bodyContent = `
        <div style="text-align:center;"><img src="${LOGO_URL}" alt="Logo" style="max-width:150px;"></div>
        <h1 style="text-align:center;">${SUPERVISOR_EMAIL_CONFIG.subject}</h1>
        <p style="text-align:center;">Run completed: ${runTimestamp}</p>
        ${statsHtml}
        ${articlesTableHtml}
        <div style="text-align: center; margin-top: 30px; font-size: 12px; color: #888888;">
            <p>This is an automated report from the ${SUPERVISOR_EMAIL_CONFIG.brandName}.</p>
        </div>
    `;

    return createSupervisorEmailWrapper(bodyContent);
}

# File: src/modules/email/constants.js
// src/modules/email/constants.js

// Placeholder for your logo URL (replace with actual URL to a PNG/JPG)
export const LOGO_URL =
  'https://static.seekingalpha.com/cdn/s3/uploads/getty_images/1493722121/image_1493722121.jpg'; // <-- REPLACE THIS


# File: src/modules/email/index.js
// src/modules/email/index.js (version 2.0)
import { logger } from '../../utils/logger.js';
import { performActualEmailSend, performActualSupervisorEmailSend } from './mailer.js';
import { ARTICLES_RELEVANCE_THRESHOLD, HEADLINES_RELEVANCE_THRESHOLD } from '../../config/index.js';
import { truncateString } from '../../utils/helpers.js';

/**
 * Determines which articles are suitable for the wealth events email and sends it.
 * Updates articles with email status.
 * @param {Array<Object>} processedArticles - Articles from the main pipeline.
 * @returns {Promise<Array<Object>>} Original articles array with updated email status fields.
 */
export async function sendWealthEventsEmail(processedArticles) {
    if (!Array.isArray(processedArticles) || processedArticles.length === 0) {
        logger.info('No articles provided to email coordinator. Skipping.');
        return processedArticles || [];
    }

    logger.info(`📧 Evaluating ${processedArticles.length} articles for wealth events email...`);

    const articlesForEmail = processedArticles.filter(article => {
        if (!article) return false;
        
        // Primary condition: Article content was successfully assessed and is relevant.
        const isArticleRelevant = article.relevance_article >= ARTICLES_RELEVANCE_THRESHOLD && !article.error;
        if (isArticleRelevant) return true;

        // Fallback condition: Headline was relevant, but content processing failed (e.g., insufficient content).
        // This ensures important leads aren't missed due to scraping issues.
        const isFallbackRelevant = article.relevance_headline >= HEADLINES_RELEVANCE_THRESHOLD && article.error;
        if(isFallbackRelevant) {
             logger.debug(`Article "${truncateString(article.headline, 50)}" selected for email based on headline relevance due to content processing issue.`);
             return true;
        }

        return false;
    });

    if (articlesForEmail.length === 0) {
        logger.info('No articles met the criteria for the wealth events email.');
        return processedArticles.map(a => ({ ...a, emailed: false, email_skipped_reason: 'Did not meet criteria' }));
    }

    logger.info(`Sending ${articlesForEmail.length} articles in wealth events email.`);

    const sortedArticlesForEmail = [...articlesForEmail].sort((a, b) => {
        const scoreA = a.relevance_article ?? a.relevance_headline ?? 0;
        const scoreB = b.relevance_article ?? b.relevance_headline ?? 0;
        return scoreB - scoreA;
    });

    const sentResults = await performActualEmailSend(sortedArticlesForEmail);

    // Merge email status back into the main list
    const finalArticleSet = processedArticles.map(original => {
        const sentVersion = sentResults.find(sent => sent.link === original.link);
        if (sentVersion) {
            return { ...original, ...sentVersion }; // Apply status from mailer
        }
        if(!original.emailed) {
            return { ...original, emailed: false, email_skipped_reason: original.email_skipped_reason || 'Did not meet criteria' };
        }
        return original;
    });

    return finalArticleSet;
}

/**
 * Coordinates sending the supervisor report email.
 * @param {Array<Object>} allAssessedArticles - All articles processed in the run.
 * @param {Object} runStats - Statistics about the current pipeline run.
 */
export async function sendSupervisorReportEmail(allAssessedArticles, runStats) {
    if (!runStats) {
        logger.error('No runStats provided for supervisor report. Skipping email.');
        return;
    }
    
    logger.info('Preparing supervisor report email...');
    
    try {
        await performActualSupervisorEmailSend(allAssessedArticles, runStats);
        logger.info('✅ Supervisor report email successfully sent/queued.');
    } catch (error) {
        logger.error({ err: error }, '💥 CRITICAL: Failed to send supervisor report email.');
    }
}

# File: src/modules/email/mailer.js
// src/modules/email/mailer.js (version 2.0)
import nodemailer from 'nodemailer';
import { logger } from '../../utils/logger.js';
import { safeExecute } from '../../utils/helpers.js';
import {
  HEADLINE_RECIPIENTS,
  SUPERVISOR_EMAIL,
  EMAIL_CONFIG,
  SUPERVISOR_EMAIL_CONFIG,
  SMTP_CONFIG,
  SEND_TO_DEFAULT_SUPERVISOR,
  IS_PRODUCTION,
  FORCE_EMAIL_SEND_DEV
} from '../../config/index.js';
import { createEmailBody } from './components/emailBodyBuilder.js';
import { createSupervisorEmailBody } from './components/supervisorEmailBodyBuilder.js';

const SMTP_UNCONFIGURED_MSG = 'SMTP authentication not fully configured.';
const RECIPIENTS_UNCONFIGURED_MSG = 'Email recipients not configured.';

async function sendEmail(mailOptions, emailType) {
    if (!IS_PRODUCTION && !FORCE_EMAIL_SEND_DEV) {
        logger.warn(`[${emailType} Mailer] DEV MODE: Skipping actual email send to: ${mailOptions.to}`);
        return { skipped: true, reason: 'DEV mode' };
    }

    if (!SMTP_CONFIG?.auth?.user || !SMTP_CONFIG?.auth?.pass) {
        logger.error(`❌ [${emailType} Mailer] ${SMTP_UNCONFIGURED_MSG}`);
        return { error: SMTP_UNCONFIGURED_MSG };
    }

    logger.info(`📤 [${emailType} Mailer] Sending email via Nodemailer to: ${mailOptions.to}.`);

    const transporter = nodemailer.createTransport(SMTP_CONFIG);

    const sendResult = await safeExecute(() => transporter.sendMail(mailOptions), {
        errorHandler: (error) => {
            logger.error(`❌ [${emailType} Mailer] Nodemailer SMTP error:`, { message: error.message, code: error.code });
            return { errorOccurred: true, details: error.message };
        },
    });

    if (sendResult && sendResult.errorOccurred) {
        return { error: `SMTP Error: ${sendResult.details}` };
    }

    logger.info(`✅ [${emailType} Mailer] Email sent successfully.`);
    return { success: true };
}

export async function performActualEmailSend(articlesForEmail) {
    if (!HEADLINE_RECIPIENTS || HEADLINE_RECIPIENTS.length === 0) {
        logger.error(`❌ [Wealth Events Mailer] ${RECIPIENTS_UNCONFIGURED_MSG}`);
        return articlesForEmail.map(a => ({ ...a, emailed: false, email_error: RECIPIENTS_UNCONFIGURED_MSG }));
    }

    const emailBodyHtml = createEmailBody(articlesForEmail);
    if (!emailBodyHtml) {
        logger.error('❌ [Wealth Events Mailer] HTML email body generation failed.');
        return articlesForEmail.map(a => ({ ...a, emailed: false, email_error: 'HTML body generation failed' }));
    }

    const mailOptions = {
        from: `"${SMTP_CONFIG.fromName}" <${SMTP_CONFIG.fromAddress}>`,
        to: HEADLINE_RECIPIENTS.join(', '),
        subject: EMAIL_CONFIG.subject,
        html: emailBodyHtml,
    };

    const result = await sendEmail(mailOptions, 'Wealth Events');

    if (result.success) {
        return articlesForEmail.map(a => ({ ...a, emailed: true, email_error: null, email_skipped_reason: null }));
    }
    if (result.skipped) {
        return articlesForEmail.map(a => ({ ...a, emailed: false, email_skipped_reason: result.reason }));
    }
    return articlesForEmail.map(a => ({ ...a, emailed: false, email_error: result.error }));
}

export async function performActualSupervisorEmailSend(allArticles, runStats) {
    if (!SUPERVISOR_EMAIL || (SUPERVISOR_EMAIL.toLowerCase().includes('default') && !SEND_TO_DEFAULT_SUPERVISOR)) {
        logger.warn('[Supervisor Mailer] Skipping: Supervisor email not configured or is default.');
        return;
    }

    const emailBodyHtml = createSupervisorEmailBody(allArticles, runStats);
    if (!emailBodyHtml) {
        logger.error('❌ [Supervisor Mailer] HTML email body generation failed.');
        throw new Error('Failed to generate supervisor email body');
    }

    const mailOptions = {
        from: `"${SMTP_CONFIG.fromName}" <${SMTP_CONFIG.fromAddress}>`,
        to: SUPERVISOR_EMAIL,
        subject: SUPERVISOR_EMAIL_CONFIG.subject,
        html: emailBodyHtml,
    };

    const result = await sendEmail(mailOptions, 'Supervisor Report');

    if (result.error) {
        throw new Error(`Failed to send supervisor email: ${result.error}`);
    }
}

# File: src/modules/mongoStore/index.js
// src/modules/mongoStore/index.js (version 1.0)
import Article from '../../../models/Article.js';
import { logger } from '../../utils/logger.js';
import { truncateString } from '../../utils/helpers.js';
import { MIN_HEADLINE_CHARS, MAX_HEADLINE_CHARS } from '../../config/index.js';

function validateInitialArticle(article) {
    if (!article || typeof article !== 'object') return 'Article object is invalid.';
    if (!article.headline || article.headline.length < MIN_HEADLINE_CHARS) return `Headline is too short (min ${MIN_HEADLINE_CHARS}).`;
    if (article.headline.length > MAX_HEADLINE_CHARS) return `Headline is too long (max ${MAX_HEADLINE_CHARS}).`;
    if (!article.link || !article.link.startsWith('http')) return 'Link is invalid.';
    if (!article.newspaper) return 'Newspaper field is missing.';
    if (typeof article.relevance_headline !== 'number') return 'relevance_headline is missing.';
    return null;
}

export async function filterFreshArticles(articles) {
    if (!articles || articles.length === 0) return [];
    
    const links = articles.map(a => a.link);
    const existingArticles = await Article.find({ link: { $in: links } }).select('link').lean();
    const existingLinks = new Set(existingArticles.map(a => a.link));
    
    const freshArticles = articles.filter(a => !existingLinks.has(a.link));
    logger.info(`Filtering complete. Found ${existingLinks.size} existing articles, ${freshArticles.length} are fresh.`);
    return freshArticles;
}

export async function storeInitialHeadlineData(articles) {
    const operations = [];
    const articlesWithStatus = articles.map(article => {
        const validationError = validateInitialArticle(article);
        if (validationError) {
            logger.warn(`Initial validation failed for "${article.headline}": ${validationError}`);
            return { ...article, storage_error_initial_headline_data: validationError };
        }

        operations.push({
            updateOne: {
                filter: { link: article.link },
                update: {
                    $set: {
                        headline: article.headline,
                        link: article.link,
                        newspaper: article.newspaper,
                        source: article.source,
                        relevance_headline: article.relevance_headline,
                        assessment_headline: article.assessment_headline,
                        raw: article.raw,
                    },
                    $setOnInsert: { createdAt: new Date() }
                },
                upsert: true,
            },
        });
        return { ...article, storage_error_initial_headline_data: null };
    });

    if (operations.length > 0) {
        try {
            logger.info(`Storing initial data for ${operations.length} headlines via bulk write.`);
            await Article.bulkWrite(operations);
        } catch (error) {
            logger.error({ err: error }, 'Bulk write operation failed for initial data.');
            // This is a broad error assignment, but sufficient for supervisor report
            return articlesWithStatus.map(a => ({ ...a, storage_error_initial_headline_data: 'Bulk DB operation failed.' }));
        }
    }

    return articlesWithStatus;
}


export async function updateArticlesWithFullData(articles) {
    const operations = articles.map(article => {
        const { link, ...dataToSet } = article;
        // Clean up data to avoid storing undefined values
        Object.keys(dataToSet).forEach(key => dataToSet[key] === undefined && delete dataToSet[key]);

        return {
            updateOne: {
                filter: { link: article.link },
                update: { $set: dataToSet },
            },
        };
    });

    if (operations.length > 0) {
        try {
            logger.info(`Updating ${operations.length} articles with full data via bulk write.`);
            await Article.bulkWrite(operations);
            return articles.map(a => ({...a, db_operation_status: 'updated'}));
        } catch (error) {
            logger.error({ err: error }, 'Bulk write operation failed for final data update.');
            return articles.map(a => ({...a, db_operation_status: 'failed', db_error_reason: 'Bulk DB op failed.' }));
        }
    }
    return [];
}

# File: src/modules/scraper/index.js
// src/modules/scraper/index.js (version 1.3)
import axios from 'axios';
import * as cheerio from 'cheerio';
import pLimit from 'p-limit';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { logger } from '../../utils/logger.js';
import { safeExecute } from '../../utils/helpers.js';
import { CONCURRENCY_LIMIT, SCRAPER_PROXY_URL } from '../../config/index.js';
import { SITES_CONFIG, TEXT_SELECTORS } from '../../config/sources.js';

const limit = pLimit(CONCURRENCY_LIMIT);

const axiosInstance = axios.create();
if (SCRAPER_PROXY_URL) {
    logger.info(`Using scraper proxy: ${new URL(SCRAPER_PROXY_URL).hostname}`);
    const httpsAgent = new HttpsProxyAgent(SCRAPER_PROXY_URL);
    axiosInstance.defaults.httpsAgent = httpsAgent;
    axiosInstance.defaults.httpAgent = httpsAgent;
}

const BROWSER_HEADERS = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'Sec-Ch-Ua': '"Not/A)Brand";v="99", "Google Chrome";v="115", "Chromium";v="115"',
    'Sec-Ch-Ua-Mobile': '?0',
    'Sec-Ch-Ua-Platform': '"Windows"',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'none',
    'Sec-Fetch-User': '?1',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
};

async function fetchPage(url) {
    const axiosConfig = { headers: BROWSER_HEADERS };
    const result = await safeExecute(() => axiosInstance.get(url, axiosConfig), {
        errorHandler: (err) => {
            const status = err.response ? err.response.status : 'N/A';
            logger.error(`Failed to fetch page ${url} [Status: ${status}].`);
            return null;
        }
    });
    // Return the response object which contains data
    return result;
}

async function scrapeSite(site) {
    logger.debug(`Scraping headlines from ${site.name}`);
    const response = await fetchPage(site.url);
    if (!response) return [];
    
    const $ = cheerio.load(response.data);
    let articles = [];

    if (site.useJsonLd) {
        $('script[type="application/ld+json"]').each((_, el) => {
            try {
                const jsonData = JSON.parse($(el).html());
                if (jsonData['@type'] === 'ItemList' && jsonData.itemListElement) {
                    jsonData.itemListElement.forEach(item => {
                        if (item.name && item.url) articles.push({ headline: item.name, link: item.url, source: site.name, newspaper: site.name });
                    });
                }
            } catch (e) { 
                logger.warn({ err: e, site: site.name }, `Failed to parse JSON-LD from ${site.name}`);
            }
        });
    } else {
        $(site.selector).each((_, el) => {
            const articleData = site.extract($(el), site);
            if (articleData && articleData.headline && articleData.link) {
                articles.push(articleData);
            }
        });
    }
    
    const uniqueArticles = Array.from(new Map(articles.map(a => [a.link, a])).values());
    logger.info(`Scraped ${uniqueArticles.length} unique headlines from ${site.name}.`);
    return uniqueArticles;
}

export async function scrapeAllHeadlines() {
    logger.info('📰 Starting headline scraping from all sources...');
    const promises = Object.values(SITES_CONFIG).map(site => limit(() => scrapeSite(site)));
    const results = await Promise.all(promises);
    return results.flat();
}

export async function scrapeArticleContent(article) {
    logger.debug(`Enriching article: ${article.link}`);
    const newspaperName = article.newspaper || article.source;
    const selector = TEXT_SELECTORS[newspaperName];
    if (!selector) {
        logger.warn(`No text selector for newspaper "${newspaperName}".`);
        return { ...article, enrichment_error: 'No selector' };
    }
    const pageResponse = await fetchPage(article.link);
    if (!pageResponse) {
        return { ...article, enrichment_error: 'Failed to fetch page' };
    }
    const $ = cheerio.load(pageResponse.data);
    const fullText = $(selector).map((_, el) => $(el).text()).get().join(' ').replace(/\s\s+/g, ' ').trim();
    if (fullText) {
        article.articleContent = { contents: [fullText] };
    } else {
        logger.warn(`Could not find text for "${article.headline}" with selector "${selector}"`);
        article.enrichment_error = 'Content not found';
    }
    return article;
}

# File: src/utils/helpers.js
// src/utils/helpers.js (version 1.0)
import { logger } from './logger.js';

/**
 * Truncates a string to a specified length, adding an ellipsis if truncated.
 * @param {string} str The string to truncate.
 * @param {number} maxLength The maximum length of the string.
 * @returns {string} The truncated string.
 */
export function truncateString(str, maxLength = 100) {
    if (typeof str !== 'string' || str.length <= maxLength) {
        return str;
    }
    return str.substring(0, maxLength) + '...';
}

/**
 * Executes an async function and handles errors gracefully.
 * @param {() => Promise<any>} asyncFn The async function to execute.
 * @param {{errorHandler: (error: Error) => any}} options Error handling options.
 * @returns {Promise<any>} The result of the function or the error handler.
 */
export async function safeExecute(asyncFn, { errorHandler } = {}) {
    try {
        return await asyncFn();
    } catch (error) {
        if (errorHandler) {
            return errorHandler(error);
        }
        logger.error({ err: error }, 'An unexpected error occurred in a safeExecute block.');
        return null; // Default fallback
    }
}

# File: src/utils/logger.js
// src/utils/logger.js (version 1.1)
import pino from 'pino';
import { LOG_LEVEL, IS_PRODUCTION } from '../config/index.js';

const pinoConfig = {
    level: LOG_LEVEL || 'info',
    // More concise logging by default, removing pid and hostname
    base: undefined, 
};

// Use pino-pretty for nice console logs in development, and clean JSON in production
if (!IS_PRODUCTION) {
    pinoConfig.transport = {
        target: 'pino-pretty',
        options: {
            colorize: true,
            // Simple time format, no system info
            translateTime: 'HH:MM:ss',
            // Remove pid and hostname from pretty print output
            ignore: 'pid,hostname', 
        },
    };
}

export const logger = pino(pinoConfig);
